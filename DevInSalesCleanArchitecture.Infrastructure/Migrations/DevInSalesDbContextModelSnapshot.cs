// <auto-generated />
using System;
using DevInSalesCleanArchitecture.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevInSalesCleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(DevInSalesDbContext))]
    partial class DevInSalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CEP = "999999-99",
                            City_Id = 1,
                            Complement = "casa",
                            Number = 22,
                            Street = "Rua Lateral"
                        },
                        new
                        {
                            Id = 2,
                            CEP = "999999-99",
                            City_Id = 2,
                            Complement = "apto",
                            Number = 45,
                            Street = "Rua Frente"
                        },
                        new
                        {
                            Id = 3,
                            CEP = "999999-99",
                            City_Id = 1,
                            Complement = "casa",
                            Number = 123,
                            Street = "Rua Lateral"
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Categoria Padrão",
                            Slug = "categoria-padrao"
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("State_Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Goiânia",
                            State_Id = 52
                        },
                        new
                        {
                            Id = 2,
                            Name = "Florianópollis",
                            State_Id = 42
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.CityPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("base_price");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("CityPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 10m,
                            CityId = 1,
                            ShippingCompanyId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 20m,
                            CityId = 1,
                            ShippingCompanyId = 2
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 30m,
                            CityId = 1,
                            ShippingCompanyId = 3
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 21m,
                            CityId = 2,
                            ShippingCompanyId = 1
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 22m,
                            CityId = 2,
                            ShippingCompanyId = 2
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 23m,
                            CityId = 2,
                            ShippingCompanyId = 3
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 31m,
                            CityId = 1,
                            ShippingCompanyId = 1
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 32m,
                            CityId = 2,
                            ShippingCompanyId = 2
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 33m,
                            CityId = 1,
                            ShippingCompanyId = 3
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 5m,
                            CityId = 1,
                            ShippingCompanyId = 4
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 6m,
                            CityId = 2,
                            ShippingCompanyId = 4
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 7m,
                            CityId = 2,
                            ShippingCompanyId = 4
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("date")
                        .HasColumnName("delivery_Date");

                    b.Property<DateTime>("Delivery_Forecast")
                        .HasColumnType("date")
                        .HasColumnName("delivery_Forecast");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date_Order")
                        .HasColumnType("date")
                        .HasColumnName("date_order");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Shipping_Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shipping_Company");

                    b.Property<decimal>("Shipping_Company_Price")
                        .HasColumnType("decimal")
                        .HasColumnName("shipping_company_price");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Unit_Price")
                        .HasColumnType("decimal")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Product");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Suggested_Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal")
                        .HasColumnName("suggested_price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Curso de C Sharp",
                            Suggested_Price = 259.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Curso de Java",
                            Suggested_Price = 249.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Curso de Delphi",
                            Suggested_Price = 189.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Curso de React",
                            Suggested_Price = 289.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Curso de HTML5 e CSS3",
                            Suggested_Price = 139.99m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Curso de JavaScript",
                            Suggested_Price = 219.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Curso de Angular",
                            Suggested_Price = 199.99m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "Curso de Ruby",
                            Suggested_Price = 319.99m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Name = "Curso de Kotlin",
                            Suggested_Price = 289.99m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Name = "Curso de Python",
                            Suggested_Price = 229.99m
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Profile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cliente"
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.ShippingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ShippingCompany");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rapidex"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Veloz e Feroz"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Além Paraíba"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Empresa Padrão"
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Initials = "RO",
                            Name = "Rondonia"
                        },
                        new
                        {
                            Id = 12,
                            Initials = "AC",
                            Name = "Acre"
                        },
                        new
                        {
                            Id = 13,
                            Initials = "AM",
                            Name = "Amazonas"
                        },
                        new
                        {
                            Id = 14,
                            Initials = "RR",
                            Name = "Roraima"
                        },
                        new
                        {
                            Id = 15,
                            Initials = "PA",
                            Name = "Par�"
                        },
                        new
                        {
                            Id = 16,
                            Initials = "AP",
                            Name = "Amap�"
                        },
                        new
                        {
                            Id = 17,
                            Initials = "TO",
                            Name = "Tocantins"
                        },
                        new
                        {
                            Id = 21,
                            Initials = "MA",
                            Name = "Maranh�o"
                        },
                        new
                        {
                            Id = 22,
                            Initials = "PI",
                            Name = "Piau�"
                        },
                        new
                        {
                            Id = 23,
                            Initials = "CE",
                            Name = "Cear�"
                        },
                        new
                        {
                            Id = 24,
                            Initials = "RN",
                            Name = "Rio Grande do Norte"
                        },
                        new
                        {
                            Id = 25,
                            Initials = "PB",
                            Name = "Para�ba"
                        },
                        new
                        {
                            Id = 26,
                            Initials = "PE",
                            Name = "Pernanmbuco"
                        },
                        new
                        {
                            Id = 27,
                            Initials = "AL",
                            Name = "Alagoas"
                        },
                        new
                        {
                            Id = 28,
                            Initials = "SE",
                            Name = "Sergipe"
                        },
                        new
                        {
                            Id = 29,
                            Initials = "BA",
                            Name = "Bahia"
                        },
                        new
                        {
                            Id = 31,
                            Initials = "MG",
                            Name = "Minas Gerais"
                        },
                        new
                        {
                            Id = 32,
                            Initials = "ES",
                            Name = "Espirito Santo"
                        },
                        new
                        {
                            Id = 33,
                            Initials = "RJ",
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 35,
                            Initials = "SP",
                            Name = "S�o Paulo"
                        },
                        new
                        {
                            Id = 41,
                            Initials = "PR",
                            Name = "Paran�"
                        },
                        new
                        {
                            Id = 42,
                            Initials = "SC",
                            Name = "Santa Catarina"
                        },
                        new
                        {
                            Id = 43,
                            Initials = "RS",
                            Name = "Rio Grande do Sul"
                        },
                        new
                        {
                            Id = 50,
                            Initials = "MS",
                            Name = "Mato Grosso do Sul"
                        },
                        new
                        {
                            Id = 51,
                            Initials = "MT",
                            Name = "Mato Grosso"
                        },
                        new
                        {
                            Id = 52,
                            Initials = "GO",
                            Name = "Goias"
                        },
                        new
                        {
                            Id = 53,
                            Initials = "DF",
                            Name = "Distrito Federal"
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.StatePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("base_price");

                    b.Property<int>("ShippingCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingCompanyId");

                    b.HasIndex("StateId");

                    b.ToTable("StatePrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 17m,
                            ShippingCompanyId = 1,
                            StateId = 11
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 20m,
                            ShippingCompanyId = 1,
                            StateId = 22
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 30m,
                            ShippingCompanyId = 1,
                            StateId = 33
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 19m,
                            ShippingCompanyId = 2,
                            StateId = 11
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 29m,
                            ShippingCompanyId = 2,
                            StateId = 22
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 37m,
                            ShippingCompanyId = 2,
                            StateId = 33
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 10m,
                            ShippingCompanyId = 3,
                            StateId = 11
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 35m,
                            ShippingCompanyId = 3,
                            StateId = 22
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 33m,
                            ShippingCompanyId = 3,
                            StateId = 33
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 5m,
                            ShippingCompanyId = 4,
                            StateId = 11
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 6m,
                            ShippingCompanyId = 4,
                            StateId = 22
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 7m,
                            ShippingCompanyId = 4,
                            StateId = 33
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2000, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "romeu@lenda.com",
                            Name = "Romeu A Lenda",
                            Password = "romeu123@",
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1974, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gustavo_levi_ferreira@gmail.com",
                            Name = "Gustavo Levi Ferreira",
                            Password = "!romeu321",
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1986, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lemosluiz@gmail.com",
                            Name = "Henrique Luiz Lemos",
                            Password = "lemos$2022",
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1996, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tomas.paulo.aragao@hotmail.com",
                            Name = "Tomás Paulo Aragão",
                            Password = "$tpa1996",
                            ProfileId = 1
                        });
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Address", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.City", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.CityPrice", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.ShippingCompany", "ShippingCompany")
                        .WithMany()
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Delivery", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.StatePrice", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.ShippingCompany", "ShippingCompany")
                        .WithMany()
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingCompany");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.User", b =>
                {
                    b.HasOne("DevInSalesCleanArchitecture.Domain.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DevInSalesCleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
